heat_template_version: 2015-10-15

description: |
  セキュリティグループの作成
  仮想ネットワークを作成
  仮想ネットワークとルーターを接続
  論理ポートの作成と、Floating IPの割り当て
  仮想サーバーの起動

parameters:
  flavor:
    type: string
    default: m1.tiny
  image:
    type: string
    default: Cirros
  public_network:
    type: string
    default: Public
  ext_router:
    type: string
    default: Sample-Router
  key:
    type: string
    default: Sample-KeyPair
  SG_NAME:
    type: string
    description: Name of the Security Group
    default: open-all
  REMOTE_IP:
    type: string
    description: Remote IP prefix to associate with the Security Group rule
    default: 10.0.2.0/24

resources:
  # セキュリティグループ
  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { get_param: SG_NAME }
      description: >
        Security group rule to create
        Allows connection from remote IP (icmp, tcp22, 80, 443, 3389, 1688, 53, and udp 53)
      rules:
      - remote_ip_prefix: { get_param: REMOTE_IP }
        protocol: tcp
        port_range_min: 1
        port_range_max: 65535
      #1 ingress: ICMP/RemoteIP
      - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: icmp }
      #2 ingress: TCP/SSH/22/RemoteIP
      - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 22, port_range_max: 22}
      #3 ingress: TCP/HTTP/80/RemoteIP
      - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 80, port_range_max: 80}
      #4 ingress: TCP/HTTPS/443/RemoteIP
      - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 443, port_range_max: 443}
      #5 ingress: TCP/RDP/3389/RemoteIP
      - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 3389, port_range_max: 3389}
      #6 ingress: TCP/KMS/1688/RemoteIP
      - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 1688, port_range_max: 1688}
      #7 ingress: TCP/DNS/53/RemoteIP
      - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 53, port_range_max: 53}
      #8 ingress: UDP/DNS/53/RemoteIP
      - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: udp, port_range_min: 53, port_range_max: 53}

  # キーペア
  key_pair:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: key }
      save_private_key: true

  # 仮想ネットワーク
  heat_network:
    type: OS::Neutron::Net
    properties:
      name: heat-net

  # 仮想サブネット
  heat_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: heat-subnet
      ip_version: 4
      network_id: { get_resource: heat_network }
      cidr: 172.16.22.0/24
      gateway_ip: 172.16.22.254
      enable_dhcp: True

  sample_router:
    type: OS::Neutron::Router
    properties:
      name: { get_param: ext_router }
      external_gateway_info:
        network: { get_param: public_network }

  # 仮想ルーターへの接続
  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: sample_router }
      subnet: { get_resource: heat_subnet }

  # 論理ポートの作成
  neutron_port1_eth0:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: heat_network }
      security_groups:
        - { get_resource: sec_group }
  neutron_port2_eth0:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: heat_network }
      security_groups:
        - { get_resource: sec_group }

  # Floating IPの作成
  floating_ip1:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }
  floating_ip2:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  # 論理ポートへの割り当て
  floating_ip_assoc1:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip1 }
      port_id: { get_resource: neutron_port1_eth0 }
  floating_ip_assoc2:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip2 }
      port_id: { get_resource: neutron_port2_eth0 }

  # 仮想サーバー
  server1:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_resource: key_pair }
      networks:
        - port: { get_resource: neutron_port1_eth0 }
  server2:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_resource: key_pair }
      networks:
        - port: { get_resource: neutron_port2_eth0 }

outputs:
  server_ip:
    value:
      - { get_attr: [floating_ip1, floating_ip_address] }
      - { get_attr: [floating_ip2, floating_ip_address] }
  private_key:
    value: { get_attr: [ key_pair, private_key ] }
