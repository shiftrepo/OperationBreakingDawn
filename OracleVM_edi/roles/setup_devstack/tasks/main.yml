---
# tasks file for setup_devstack
#- name: create stack user TODO use user module
#  shell: |-
#    useradd -s /bin/bash -d /opt/stack -m stack
#    echo "stack ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/stack
    

- name: Make sure we have a 'sudo' group
  group:
    name=sudo
    state=present

- name: Allow wheel group to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%sudo'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'

#- name: Add sudoers users to wheel group
#  user: name=deployer groups=wheel append=yes state=present createhome=yes

#python -c 'import crypt; print crypt.crypt("stack", "$1$SomeSalt$")'
- name: create stack user.
  user: 
    name: stack
    password: $1$SomeSalt$kVrT5m9Ts9.Py85gBpQVA.
    groups: 
#      - wheel
      - sudo
    state: present
    shell: /bin/bash
    system: no
    createhome: yes
    home: /opt/stack

#              regexp='^#?\s*PasswordAuthentication yes'
#- name: Disallow root SSH access
#  lineinfile: 
#    dest: /etc/ssh/sshd_config
#    regexp: 'PasswordAuthentication yes.*'
#    line: "PasswordAuthentication no"
#    state: present
#    backrefs: yes
#    backup: yes
#  notify: restart ssh

- name: Create a root directory for devstack if needed
  shell: |-
    git clone --branch stable/queens https://git.openstack.org/openstack-dev/devstack /opt/stack/devstack #TODO stable/queens2var
    chown -R stack:stack /opt/stack #TODO USER2var

#- name: configure devstack
#  copy:
#    src: ../files/local.conf
#    dest: /opt/stack/devstack/local.conf
#    owner: stack
#    group: stack

- name: Generate /opt/stack/devstack/local.conf file
  template:
    src: templates/local.j2
    dest: /opt/stack/devstack/local.conf
    owner: stack
    group: stack
  register: localfileout
- debug: var=localfileout.stdout_lines

- name: pip upgrade
  shell: |-
    pip install --upgrade pip
  become: true
  become_user: root

#- name: exec devstack
#  become_user: stack
#  shell: |-
#    cd /opt/stack/devstack
#    ./stack.sh
#  register: devstack
#  failed_when: "'FAILED' in command_result.stderr"
#- debug: var=devstack.stdout_lines
